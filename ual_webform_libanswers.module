<?php
// If your drupal site uses Composer manager, there is no need to require autoload
// else it should be required.
if(file_exists(__DIR__ . '/vendor/autoload.php')) {
  require __DIR__ . '/vendor/autoload.php';
}

/**
 * Implements hook_node_load().
 */
function ual_webform_libanswers_node_load($nodes, $types)
{
  $result = db_select('webform')
    ->fields('webform')
    ->condition('nid', array_keys($nodes), 'IN')
    ->execute()
    ->fetchAllAssoc('nid', PDO::FETCH_ASSOC);

  foreach ($result as $nid => $webform) {
    $nodes[$nid]->libanswer_ticket_settings = db_select('ual_webform_libanswers_tickets')
      ->fields('ual_webform_libanswers_tickets')
      ->condition('nid', $nid)
      ->execute()
      ->fetchAssoc();
  }
}

/**
 * Implements hook_menu()
 */
function ual_webform_libanswers_menu()
{
  $items['node/%webform_menu/webform/libanswers'] = array(
    'title' => 'Libanswers ticket',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('libanswers_ticket_form', 1),
    'access callback' => 'webform_node_update_access',
    'access arguments' => array(1),
    'file' => 'includes/ual_webform_libanswers_ticket.inc',
    'weight' => 4,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/system/ual_webform_libanswers'] = array(
    'title' => 'UAL Webform LibAnswers',
    'description' => 'Configure UAL Webform LibAnswers module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ual_webform_libanswers_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Form constructor for the ual_webform_libanswers configuration form.
 */
function ual_webform_libanswers_form($form, &$form_state)
{
  $form['ual_webform_libanswers_client_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Client Id'),
    '#default_value' => variable_get('ual_webform_libanswers_client_id', ''),
    '#description' => t('LibAnswers application client id.'),
  );

  $form['ual_webform_libanswers_client_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Client Secret'),
    '#default_value' => variable_get('ual_webform_libanswers_client_secret', ''),
    '#description' => t('LibAnswers application client secret.'),
  );

  $form['ual_webform_libanswers_slack_webhook'] = array(
    '#type' => 'textfield',
    '#title' => t('Slack Webhook'),
    '#default_value' => variable_get('ual_webform_libanswers_slack_webhook', ''),
    '#description' => t('Slack channel to post logs.'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_webform_submission_insert()
 *
 * Note that this hook is called after a submission has already been saved to
 * the database.
 */
function ual_webform_libanswers_webform_submission_insert($node, $submission)
{
  $libanswers = $node->libanswer_ticket_settings;

  if(!$libanswers) {
    return;
  }

  if ($libanswers['generate_ticket']) {
    if($libanswers['template'] == 'default') {
      $template = theme(array('webform_mail_' . $node->nid, 'webform_mail', 'webform_mail_message'), array('node' => $node, 'email' => NULL));
    } else {
      $template = $libanswers['template'];
    }

    $quid = $libanswers['quid'];
    $body = webform_replace_tokens($template, $node, $submission, NULL, FALSE);
    $pquestion = webform_format_email_subject($libanswers['pquestion'], $node, $submission);
    $from = webform_format_email_address($libanswers['pemail'], $libanswers['pname'], $node, $submission, TRUE, TRUE, NULL, NULL);

    preg_match('/^"(.+)" <(.+)>$/', $from, $matches);

    $params = [
      'quid' => $quid,
      'pquestion' => $pquestion,
      'pdetails' => $body,
      'pname' => $matches[1],
      'pemail' => $matches[2],
      'ip' => $submission->remote_addr
    ];

    $submissionUrl = url('node/' . $submission->nid . '/submission/' . $submission->sid, array('absolute' => TRUE));
    _create_libanswers_ticket($params, $submissionUrl);
  }
}

function _create_libanswers_ticket($params, $submissionUrl)
{
  $client = new GuzzleHttp\Client(['base_uri' => 'https://ask.library.arizona.edu/api/1.1/',]);

  try {
    $response = $client->request('POST', 'oauth/token', [
      'form_params' => [
        'client_id' => variable_get('ual_webform_libanswers_client_id'),
        'client_secret' => variable_get('ual_webform_libanswers_client_secret'),
        'grant_type' => 'client_credentials'
      ]
    ]);

    $json = json_decode($response->getBody());
    $token = $json->access_token;

    $response = $client->request('POST', 'ticket/create', [
      'form_params' => $params,
      'headers' => [
        'Authorization' => 'Bearer ' . $token
      ]
    ]);

    $json = json_decode($response->getBody());
    $ticketUrl = $json->ticketUrl;

    $message = "Submission: $submissionUrl\n:rocket: LibAnswers ticket created:\nhttps://ask.library.arizona.edu$ticketUrl";
    _post_slack_message($message);

    watchdog('ual_webform_libanswers', '%submissionUrl<br>LibAnswers ticket created:<br>https://ask.library.arizona.edu%ticketUrl', array('%submissionUrl' => $submissionUrl, '%ticketUrl' => $ticketUrl), WATCHDOG_INFO);
  } catch (GuzzleHttp\Exception\RequestException $e) {
    $message = "<!channel> $submissionUrl\n:x: Fail to create the LibAnswers ticket:\n" . $e->getMessage();
    _post_slack_message($message);

    watchdog('ual_webform_libanswers', '%submissionUrl<br>Fail to create the LibAnswers ticket:<br>%message', array('%submissionUrl' => $submissionUrl, '%message' => $e->getMessage()), WATCHDOG_ERROR);
  }
}

function _post_slack_message($message)
{
  $client = new GuzzleHttp\Client();
  $webhook = variable_get('ual_webform_libanswers_slack_webhook');

  try {
    $client->request('POST', $webhook, ['json' => ['text' => $message]]);
  } catch (GuzzleHttp\Exception\RequestException $e) {
    watchdog('ual_webform_libanswers', 'Fail to send the slack message:<br>%message', array('%message' => $e->getMessage()), WATCHDOG_ERROR);
  }
}

/**
 * Implements hook_theme().
 */
function ual_webform_libanswers_theme()
{
  $theme = array(
    'libanswers_ticket_form' => array(
      'render element' => 'form',
      'file' => 'includes/ual_webform_libanswers_ticket.inc',
    ),
  );
  return $theme;
}
