<?php

const LIBANSWERS_VAR_PREFIX = "libanswers_ticket_nid";

/**
 * Implements hook_menu()
 */
function ual_webform_libanswers_menu()
{
  $items['admin/config/system/ual_webform_libanswers'] = array(
    'title' => 'UAL Webform LibAnswers',
    'description' => 'Configure UAL Webform LibAnswers module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ual_webform_libanswers_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Form constructor for the ual_webform_libanswers configuration form.
 */
function ual_webform_libanswers_form($form, &$form_state)
{
  $form['ual_webform_libanswers_client_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Client Id'),
    '#default_value' => variable_get('ual_webform_libanswers_client_id', ''),
    '#description' => t('LibAnswers application client id.'),
  );

  $form['ual_webform_libanswers_client_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Client Secret'),
    '#default_value' => variable_get('ual_webform_libanswers_client_secret', ''),
    '#description' => t('LibAnswers application client secret.'),
  );

  $form['ual_webform_libanswers_slack_webhook'] = array(
    '#type' => 'textfield',
    '#title' => t('Slack Webhook'),
    '#default_value' => variable_get('ual_webform_libanswers_slack_webhook', ''),
    '#description' => t('Slack channel to post logs.'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_webform_submission_insert()
 *
 * Note that this hook is called after a submission has already been saved to
 * the database.
 */
function ual_webform_libanswers_webform_submission_insert($node, $submission)
{
  $quid_map = [
    'sc@lib.arizona.edu' => 33,
    'lbry-askspcoll@email.arizona.edu' => 33,
    '3d@lib.arizona.edu' => 820
  ];

  $emails = $node->webform['emails'];

  foreach ($emails as $email) {
    // Email sending is unchecked
    //var_dump($email);
    $email_template = array(
      'template' => 'default'
    );
    // var_dump(theme(array('webform_mail_' . $node->nid, 'webform_mail', 'webform_mail_message'), array('node' => $node, 'submission' => $submission, 'email' => $email_template)));
    var_dump(theme(array('webform_mail_' . $node->nid, 'webform_mail', 'webform_mail_message')));
    if (false) {
      $to_addrs = array_map('strtolower', explode(',', $email['email']));

      foreach ($to_addrs as $to_addr) {
        if (array_key_exists($to_addr, $quid_map)) {
          if ($email['template'] == 'default') {
            $template = theme(array('webform_mail_' . $node->nid, 'webform_mail', 'webform_mail_message'), array('node' => $node, 'submission' => $submission, 'email' => $email));
          } else {
            $template = $email['template'];
          }

          $body = webform_replace_tokens($template, $node, $submission, $email, FALSE);
          $from = webform_format_email_address($email['from_address'], $email['from_name'], $node, $submission, TRUE, TRUE, NULL, NULL);
          $subject = webform_format_email_subject($email['subject'], $node, $submission);

          preg_match('/^"(.+)" <(.+)>$/', $from, $matches);

          $params = [
            'quid' => $quid_map[$to_addr],
            'pquestion' => $subject,
            'pdetails' => $body,
            'pname' => $matches[1],
            'pemail' => $matches[2],
            'ip' => $submission->remote_addr
          ];

          $submissionUrl = url('node/' . $submission->nid . '/submission/' . $submission->sid, array('absolute' => TRUE));

          _create_libanswers_ticket($params, $submissionUrl);
        }
      }
    }
  }
  exit();
}

function _create_libanswers_ticket($params, $submissionUrl)
{
  $client = new GuzzleHttp\Client(['base_uri' => 'https://ask.library.arizona.edu/api/1.1/',]);

  try {
    $response = $client->request('POST', 'oauth/token', [
      'form_params' => [
        'client_id' => variable_get('ual_webform_libanswers_client_id'),
        'client_secret' => variable_get('ual_webform_libanswers_client_secret'),
        'grant_type' => 'client_credentials'
      ]
    ]);

    $json = json_decode($response->getBody());
    $token = $json->access_token;

    $response = $client->request('POST', 'ticket/create', [
      'form_params' => $params,
      'headers' => [
        'Authorization' => 'Bearer ' . $token
      ]
    ]);

    $json = json_decode($response->getBody());
    $ticketUrl = $json->ticketUrl;

    $message = "Submission: $submissionUrl\n:rocket: LibAnswers ticket created:\nhttps://ask.library.arizona.edu$ticketUrl";
    _post_slack_message($message);

    watchdog('ual_webform_libanswers', '%submissionUrl<br>LibAnswers ticket created:<br>https://ask.library.arizona.edu%ticketUrl', array('%submissionUrl' => $submissionUrl, '%ticketUrl' => $ticketUrl), WATCHDOG_INFO);
  } catch (GuzzleHttp\Exception\RequestException $e) {
    $message = "<!channel> $submissionUrl\n:x: Fail to create the LibAnswers ticket:\n" . $e->getMessage();
    _post_slack_message($message);

    watchdog('ual_webform_libanswers', '%submissionUrl<br>Fail to create the LibAnswers ticket:<br>%message', array('%submissionUrl' => $submissionUrl, '%message' => $e->getMessage()), WATCHDOG_ERROR);
  }
}

function _post_slack_message($message)
{
  $client = new GuzzleHttp\Client();
  $webhook = variable_get('ual_webform_libanswers_slack_webhook');

  try {
    $client->request('POST', $webhook, ['json' => ['text' => $message]]);
  } catch (GuzzleHttp\Exception\RequestException $e) {
    watchdog('ual_webform_libanswers', 'Fail to send the slack message:<br>%message', array('%message' => $e->getMessage()), WATCHDOG_ERROR);
  }
}

function ual_webform_libanswers_form_alter(&$form, &$form_state, $form_id) {
  if($form_id == 'webform_configure_form') {
    $node = $form['#node'];
    $form['libanswers_ticket'] = array(
      '#type' => 'fieldset',
      '#title' => t('LibAnswers ticket'),
      '#collapsible' => TRUE,
//      '#collapsed' => !empty($email['cid']) && empty($email['template']),
      '#description' => t('An e-mail template can customize the display of e-mails.'),
      '#weight' => 15,
      '#tree' => FALSE,
      '#attributes' => array('id' => 'webform-template-fieldset'),
    );
    $form['libanswers_ticket']['generate_ticket'] = array(
      '#type' => 'checkbox',
      '#title' => t('Generate a ticket in Libanswers'),
      '#default_value' => variable_get(LIBANSWERS_VAR_PREFIX . $node->nid, 0)
    );

    $form['libanswers_ticket']['template_option'] = array(
      '#type' => 'select',
      '#options' => array(
        'default' => t('Default template'),
        'custom' => t('Custom template'),
      ),
      '#default_value' => 'default',
      //'#default_value' => $email['template'] == 'default' ? 'default' : 'custom',
    );

    //$default_template = theme(array('webform_mail_' . $node->nid, 'webform_mail', 'webform_mail_message'), array('node' => $node, 'email' => $email));
    $default_template = theme(array('webform_mail_' . $node->nid, 'webform_mail', 'webform_mail_message'), array('node' => $node, 'email' => NULL));
    //$template = $email['template'] == 'default' ? $default_template : $email['template'];
    $template = $default_template;
    $form['libanswers_ticket']['template'] = array(
      '#type' => 'textarea',
      '#rows' => max(10, min(20, count(explode("\n", $template)))),
      '#default_value' => $template,
      '#wysiwyg' => webform_variable_get('webform_email_html_capable') ? NULL : FALSE,
      '#description' => theme('webform_token_help', array('groups' => array('node', 'submission'))),
    );
  }
  $form['#submit'][] = 'libanswers_ticket_settings_handler';
  return $form;
}

function libanswers_ticket_settings_handler(&$form, &$form_state) {
  $libasnwer_ticket_generation_var = LIBANSWERS_VAR_PREFIX . $form['#node']->nid;
  variable_set($libasnwer_ticket_generation_var, $form_state['input']['libanswers_ticket']);
}
